version: '3'

env:
  # PACKAGE contains the module name from the go.mod file.
  PACKAGE:
    sh: grep 'module' ./go.mod | awk '{print $2}'
  # TAG checks if the current commit is tagged and returns it if that's the case. We use this to set the version flag
  # in the build task (we assume tags are always version tags). If the current commit is not tagged, TAG will be set
  # to 'untagged'.
  TAG:
    sh: git describe --tags --exact-match 2>/dev/null || echo 'untagged'
  # COMMIT contains the full commit hash of the current commit
  COMMIT:
    sh: git log -n 1 --pretty=format:"%H"
  # SHORT_COMMIT contains the abbreviated commit hash of the current commit
  SHORT_COMMIT:
    sh: git log -1 --pretty=format:%h
  # REPOSITORY contains the Github repository name parsed from the remote url
  REPOSITORY:
    sh: basename -s .git $(git remote get-url origin)
  # ORGANISATION contains the Github organisation parsed from the remote url
  ORGANISATION:
    sh: git remote get-url origin | sed -E 's/(.*github\.com[:\/])([^\/]+)\/([^\/]+)(\.git)?/\2/'
  # REGISTRY is set to the container registry to be used to upload Docker images
  REGISTRY: "ghcr.io"

tasks:

  init:
    desc: "Initializes the project by renaming it from the template and properly rebasing it. This should be run first before anything else is done."
    silent: true
    cmds:
      - |
        # Add the template as remote and rebase this repository onto the template so we can merge changes from the template repository in the future
        echo "adding git@github.com:pinax-network/golang-service-template.git as 'template' remote and rebase onto template/main"
        git remote add template git@github.com:pinax-network/golang-service-template.git
        git fetch --all
        git rebase template/main
        
        # Rename this module to the current directory
        echo "renaming project to {{.NEW_MODULE}}"
        go mod edit -module {{.NEW_MODULE}}
        find . -type f \( -name "*.go" -o -name "Dockerfile" -o -name ".gitignore" \) -exec sed -i '' -e 's/{{.PACKAGE}}/{{.NEW_MODULE}}/g' {} \;
        gofmt -s -w .
        
        # Commit the changes
        echo "committing changes"
        git add .
        git commit -m "initialized project {{.NEW_MODULE}}"
        
        # Copy over the default config if none available
        if [ ! -f ./config.yaml ]; then
          cp config.example.yaml config.yaml
        fi
        
        echo "all done, please run 'git push --force' to update your origin remote"
        echo "run 'task build && task start:service' to run your application"
    vars:
      NEW_MODULE:
        sh: basename "$PWD"

  print:env:
    desc: "Print all environment variables set within this Taskfile."
    silent: true
    cmds:
      - |
        echo -e "PACKAGE: \\t$PACKAGE"
        echo -e "TAG: \\t\\t$TAG"
        echo -e "SHORT_COMMIT: \\t$SHORT_COMMIT"
        echo -e "COMMIT: \\t$COMMIT"
        echo -e "REPOSITORY: \\t$REPOSITORY"
        echo -e "ORGANISATION: \\t$ORGANISATION"
        echo -e "REGISTRY: \\t$REGISTRY"

  build:
    desc: "Builds the Go binary. You can pass through arguments to the Go compiler by appending --, for example: 'task build -- -tags my_feature'. To set compiler flags use the BUILD_FLAGS environment variable."
    cmds:
      - |
        {{.BUILD_FLAGS}} go build -v {{.CLI_ARGS}} --ldflags='-X "{{.PACKAGE}}/flags.version={{.TAG}}" -X "{{.PACKAGE}}/flags.commit={{.SHORT_COMMIT}}"'

  build:docker:
    desc: "Builds the Docker image"
    silent: true
    cmds:
      - task: build
        vars:
          BUILD_FLAGS: 'GOOS=linux GOARCH=amd64'
      - |
        REPO="{{.REGISTRY}}/{{.ORGANISATION}}/{{.REPOSITORY}}:"
        VERSION={{.SHORT_COMMIT}}
        LATEST=""
        BUILD_TIMESTAMP=$( date '+%F_%H:%M:%S' )
        
        # in case we are on a tagged version, we use this as version string (instead of the short commit) and we also
        # push that docker image as new 'latest'
        if [[ {{.TAG}} == v* ]]; then
          VERSION="{{.TAG}}"
          LATEST="${REPO}latest"
        fi
        
        DOCKER_TAG="$REPO$VERSION"
        
        if [ -z "$LATEST" ]; then
          echo "running: docker build -t \"$DOCKER_TAG\" --build-arg VERSION=\"$VERSION\" --build-arg BUILD_TIMESTAMP=\"$BUILD_TIMESTAMP\" ."
          docker build -t "$DOCKER_TAG" --build-arg VERSION="$VERSION" --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" . 
          docker push $DOCKER_TAG
        else
          echo "running: docker build -t \"$DOCKER_TAG\" -t \"$LATEST\" --build-arg VERSION=\"$VERSION\" --build-arg BUILD_TIMESTAMP=\"$BUILD_TIMESTAMP\" ."
          docker build -t "$DOCKER_TAG" -t "$LATEST" --build-arg VERSION="$VERSION" --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" . 
          docker push $DOCKER_TAG
          docker push $LATEST
        fi

  run:format:
    desc: "Runs Golang's code formatter gofmt"
    cmds:
      - gofmt -s -w .

  run:lint:
    desc: "Runs Golang's linter"
    cmds:
      - golangci-lint run ./...

  start:service:
    desc: "Starts a local instance of the service. You can pass through arguments to the binary by appending --, for example 'task start -- -debug'"
    cmds:
      - ./{{.PACKAGE}} {{.CLI_ARGS}}

  test:format:
    desc: "Checks Golang's code formatter"
    silent: true
    cmds:
      - |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; 
          then exit 1; 
        fi
